

h1. LINHA FRAMEWORK - versão 1.2 (ALPHA)

p. by Mateus Souza - mateussouzaweb@gmail.com | http://www.mateussouza.com


h2. Licença

p. LICENÇA: MIT and GPL License - http://www.opensource.org/licenses/mit-license.php || http://www.gnu.org/licenses/gpl.html


h2. Change-log

h3. 1.2

 * Linha Form renomeado pra Linha Valida(o nome tem mais relação com a função do plugin)
 * Atualização para os plugins: Linha Acord, Linha Focuss, Linha Modal, Linha Nav, Linha Slidetabs, Linha Tooltip e Linha Form(agora chamado Valida), 
 * Remoção de estilos para IE6 e Mobile - não tem muita utilidade :)
 * Grid CSS fica em um novo arquivo css (grid.css)
 * Regra para grid simplificada ( + semelhante ao grid 960)
 * Otimização de CSS
 * Introdução/Suporte a HTML5
 * Reset.css com suporte a HTML5
 * Adicionado estilos básicos para html5 (html5.css)	

h3. 1.1

 * Alguns fixs sem importancia :)
 * Implementação de css para tabelas (&lt;table&gt;)
 * Tamanho de fontes para small e big (&lt;small&gt;&lt;big&gt;)
 * Estilos hr (&lt;hr/&gt;)
 * Estilos para iframe (&lt;iframe&gt;)
 * Fim do suporte para modelos
 * Adicionado suporte a grid 12, 16 e 24 colunas
 * Adição de Classes fix: .primeiro e .ultimo
 * Atualização versões plugins js

h3. 1.0

* Inicial
		
h2. Algumas Considerações

h3. MONITORAMENTO LIVE

p. A partir da versão 1.2 os plugins para jQuery terão monitoramente live, ainda não descobri uma forma mais eficaz do que a atual para o monitoramento do DOM.
Basicamente é feito uma checagem em um intervalo determinado tem tempo para a chegagem.

p. Para ativar o monitoramento apenas sete a opção "live" para "true" no plugin que deseja usar, por exemplo:

@$('meu-elemento').pluginX({
	live: true
});@

p. Há ainda a opção de alterar o intervalo de tempo para a checagem...o padrão é 100 milisegundos (1/10 de um segundo).
Se desejar alterar, a opção é "liveTempo", mais lembre-se que deve ser em milisegundos.

p. Alternativamente você pode fazer o monitoramento de modo manual.

p. Use $('elemento-adicionado').trigger('iniciaPluginX'); quando ele for inserido na página por meio de ajax ou html(); por exemplo...assim terá o mesmo efeito do monitoramente live, mais de forma manual.

p. Lembre-se que o seletor para o trigger deve ser o mesmo usado em sua nova instância do plugin, para que o plugin recupere as opções setadas para este elemento. EX:

@$('meu-elemento').pluginX({
	opções...
});
//Outras funções
$('button').click(function(){
	$('body').append('meu-elemento');
	$('meu-elemento').trigger('iniciaPluginX'); //Assim ele inicia o plugin com as opções setadas anteriormente
});@

p. Há ainda uma terceira opção, não é uma boa prática ao meu ver mais também se encaixa:

p. Estancie o plugin logo depois que o elemento for adicionado a página. EX:

@$('body').append('meu-elemento');
	//Inicie o plugin agora
$('meu-elemento').pluginX({
	opções....
});@

p. Assim o resultado será o mesmo das duas opções acima;

h3. LIVE

p. Diferentemente de *MONITORAMENTO* LIVE, os plugins com live não precisa de nada descrito no *MONITORAMENTO* LIVE para se ter o mesmo efeito. Estes são feitos de forma automática.
Para melhor esclarecimento, o *MONITORAMENTO LIVE* é necessário em alguns plugins pois eles necessitam de um "setup" antes de entrar em uso, o que já não ocorre em um plugin LIVE. Sendo um pouco mais prático um accordion precisa de um "setup", ou seja, definir qual parte do accordion será a inicial e etc. Já um tooltip não precisa, pois o setup é feito assim que ele é disparado.

h3. CALLBACK

p. Todos os plugins oferem o callback para personalização de eventos.

		
		
